{"ast":null,"code":"import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2,\n  half = 0.5;\nexport function drawText(data) {\n  var _character$style, _character$weight, _character$font;\n  const {\n      context,\n      particle,\n      radius,\n      opacity\n    } = data,\n    character = particle.shapeData;\n  if (!character) {\n    return;\n  }\n  const textData = character.value;\n  if (textData === undefined) {\n    return;\n  }\n  if (particle.text === undefined) {\n    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n  }\n  const text = particle.text,\n    style = (_character$style = character.style) !== null && _character$style !== void 0 ? _character$style : \"\",\n    weight = (_character$weight = character.weight) !== null && _character$weight !== void 0 ? _character$weight : \"400\",\n    size = Math.round(radius) * double,\n    font = (_character$font = character.font) !== null && _character$font !== void 0 ? _character$font : \"Verdana\",\n    fill = particle.shapeFill;\n  const lines = text === null || text === void 0 ? void 0 : text.split(\"\\n\");\n  if (!lines) {\n    return;\n  }\n  context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n  context.globalAlpha = opacity;\n  for (let i = 0; i < lines.length; i++) {\n    drawLine(context, lines[i], radius, opacity, i, fill);\n  }\n  context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n  const offsetX = line.length * radius * half,\n    pos = {\n      x: -offsetX,\n      y: radius * half\n    },\n    diameter = radius * double;\n  if (fill) {\n    context.fillText(line, pos.x, pos.y + diameter * index);\n  } else {\n    context.strokeText(line, pos.x, pos.y + diameter * index);\n  }\n}","map":{"version":3,"names":["itemFromSingleOrMultiple","double","half","drawText","data","_character$style","_character$weight","_character$font","context","particle","radius","opacity","character","shapeData","textData","value","undefined","text","randomIndexData","style","weight","size","Math","round","font","fill","shapeFill","lines","split","concat","globalAlpha","i","length","drawLine","line","index","offsetX","pos","x","y","diameter","fillText","strokeText"],"sources":["D:/ReactApp/node_modules/@tsparticles/shape-text/browser/Utils.js"],"sourcesContent":["import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,qBAAqB;AAC9D,MAAMC,MAAM,GAAG,CAAC;EAAEC,IAAI,GAAG,GAAG;AAC5B,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAE;EAAA,IAAAC,gBAAA,EAAAC,iBAAA,EAAAC,eAAA;EAC3B,MAAM;MAAEC,OAAO;MAAEC,QAAQ;MAAEC,MAAM;MAAEC;IAAQ,CAAC,GAAGP,IAAI;IAAEQ,SAAS,GAAGH,QAAQ,CAACI,SAAS;EACnF,IAAI,CAACD,SAAS,EAAE;IACZ;EACJ;EACA,MAAME,QAAQ,GAAGF,SAAS,CAACG,KAAK;EAChC,IAAID,QAAQ,KAAKE,SAAS,EAAE;IACxB;EACJ;EACA,IAAIP,QAAQ,CAACQ,IAAI,KAAKD,SAAS,EAAE;IAC7BP,QAAQ,CAACQ,IAAI,GAAGjB,wBAAwB,CAACc,QAAQ,EAAEL,QAAQ,CAACS,eAAe,CAAC;EAChF;EACA,MAAMD,IAAI,GAAGR,QAAQ,CAACQ,IAAI;IAAEE,KAAK,IAAAd,gBAAA,GAAGO,SAAS,CAACO,KAAK,cAAAd,gBAAA,cAAAA,gBAAA,GAAI,EAAE;IAAEe,MAAM,IAAAd,iBAAA,GAAGM,SAAS,CAACQ,MAAM,cAAAd,iBAAA,cAAAA,iBAAA,GAAI,KAAK;IAAEe,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACb,MAAM,CAAC,GAAGT,MAAM;IAAEuB,IAAI,IAAAjB,eAAA,GAAGK,SAAS,CAACY,IAAI,cAAAjB,eAAA,cAAAA,eAAA,GAAI,SAAS;IAAEkB,IAAI,GAAGhB,QAAQ,CAACiB,SAAS;EAChM,MAAMC,KAAK,GAAGV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,KAAK,CAAC,IAAI,CAAC;EAC/B,IAAI,CAACD,KAAK,EAAE;IACR;EACJ;EACAnB,OAAO,CAACgB,IAAI,MAAAK,MAAA,CAAMV,KAAK,OAAAU,MAAA,CAAIT,MAAM,OAAAS,MAAA,CAAIR,IAAI,WAAAQ,MAAA,CAAOL,IAAI,OAAG;EACvDhB,OAAO,CAACsB,WAAW,GAAGnB,OAAO;EAC7B,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACnCE,QAAQ,CAACzB,OAAO,EAAEmB,KAAK,CAACI,CAAC,CAAC,EAAErB,MAAM,EAAEC,OAAO,EAAEoB,CAAC,EAAEN,IAAI,CAAC;EACzD;EACAjB,OAAO,CAACsB,WAAW,GAAG,CAAC;AAC3B;AACA,SAASG,QAAQA,CAACzB,OAAO,EAAE0B,IAAI,EAAExB,MAAM,EAAEC,OAAO,EAAEwB,KAAK,EAAEV,IAAI,EAAE;EAC3D,MAAMW,OAAO,GAAGF,IAAI,CAACF,MAAM,GAAGtB,MAAM,GAAGR,IAAI;IAAEmC,GAAG,GAAG;MAC/CC,CAAC,EAAE,CAACF,OAAO;MACXG,CAAC,EAAE7B,MAAM,GAAGR;IAChB,CAAC;IAAEsC,QAAQ,GAAG9B,MAAM,GAAGT,MAAM;EAC7B,IAAIwB,IAAI,EAAE;IACNjB,OAAO,CAACiC,QAAQ,CAACP,IAAI,EAAEG,GAAG,CAACC,CAAC,EAAED,GAAG,CAACE,CAAC,GAAGC,QAAQ,GAAGL,KAAK,CAAC;EAC3D,CAAC,MACI;IACD3B,OAAO,CAACkC,UAAU,CAACR,IAAI,EAAEG,GAAG,CAACC,CAAC,EAAED,GAAG,CAACE,CAAC,GAAGC,QAAQ,GAAGL,KAAK,CAAC;EAC7D;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}