{"ast":null,"code":"export function observeSections() {\n  const sections = document.querySelectorAll('.section');\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('active');\n      } else {\n        entry.target.classList.remove('active');\n      }\n    });\n  }, {\n    threshold: 0.1\n  });\n  sections.forEach(section => {\n    observer.observe(section);\n  });\n}","map":{"version":3,"names":["observeSections","sections","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","threshold","section","observe"],"sources":["D:/ReactApp/src/utils/sectionObserver.js"],"sourcesContent":["export function observeSections() {\r\n  const sections = document.querySelectorAll('.section');\r\n  \r\n  const observer = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        entry.target.classList.add('active');\r\n      } else {\r\n        entry.target.classList.remove('active');\r\n      }\r\n    });\r\n  }, { threshold: 0.1 });\r\n\r\n  sections.forEach(section => {\r\n    observer.observe(section);\r\n  });\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAAA,EAAG;EAChC,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,UAAU,CAAC;EAEtD,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;IACrDA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAI;MACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxBD,KAAK,CAACE,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;MACtC,CAAC,MAAM;QACLJ,KAAK,CAACE,MAAM,CAACC,SAAS,CAACE,MAAM,CAAC,QAAQ,CAAC;MACzC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,CAAC;EAEtBb,QAAQ,CAACM,OAAO,CAACQ,OAAO,IAAI;IAC1BX,QAAQ,CAACY,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}