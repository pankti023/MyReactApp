{"ast":null,"code":"import { PixelMode, Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5,\n  defaultLifeDelay = 0,\n  minLifeCount = 0,\n  defaultSpawnDelay = 0,\n  defaultEmitDelay = 0,\n  defaultLifeCount = -1,\n  defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n  if (particlesOptions.color) {\n    particlesOptions.color.value = color;\n  } else {\n    particlesOptions.color = {\n      value: color\n    };\n  }\n}\nexport class EmitterInstance {\n  constructor(engine, emitters, container, options, position) {\n    var _this = this,\n      _this$options$life$de,\n      _this$_initialPositio,\n      _particlesOptions,\n      _particlesOptions2,\n      _particlesOptions2$mo,\n      _particlesOptions$mov,\n      _particlesOptions$mov2,\n      _this$options$life$co,\n      _this$_engine$emitter;\n    this.emitters = emitters;\n    this.container = container;\n    this._destroy = () => {\n      var _this$_mutationObserv, _this$_resizeObserver;\n      (_this$_mutationObserv = this._mutationObserver) === null || _this$_mutationObserv === void 0 || _this$_mutationObserv.disconnect();\n      this._mutationObserver = undefined;\n      (_this$_resizeObserver = this._resizeObserver) === null || _this$_resizeObserver === void 0 || _this$_resizeObserver.disconnect();\n      this._resizeObserver = undefined;\n      this.emitters.removeEmitter(this);\n      this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: this.container,\n        data: {\n          emitter: this\n        }\n      });\n    };\n    this._prepareToDie = () => {\n      var _this$options$life;\n      if (this._paused) {\n        return;\n      }\n      const duration = ((_this$options$life = this.options.life) === null || _this$options$life === void 0 ? void 0 : _this$options$life.duration) !== undefined ? getRangeValue(this.options.life.duration) : undefined,\n        minDuration = 0,\n        minLifeCount = 0;\n      if (this.container.retina.reduceFactor && (this._lifeCount > minLifeCount || this._immortal) && duration !== undefined && duration > minDuration) {\n        this._duration = duration * millisecondsToSeconds;\n      }\n    };\n    this._setColorAnimation = function (animation, initValue, maxValue) {\n      var _animation$speed;\n      let factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultColorAnimationFactor;\n      const container = _this.container;\n      if (!animation.enable) {\n        return initValue;\n      }\n      const colorOffset = randomInRange(animation.offset),\n        delay = getRangeValue(_this.options.rate.delay),\n        emitFactor = delay * millisecondsToSeconds / container.retina.reduceFactor,\n        defaultColorSpeed = 0,\n        colorSpeed = getRangeValue((_animation$speed = animation.speed) !== null && _animation$speed !== void 0 ? _animation$speed : defaultColorSpeed);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * factor) % maxValue;\n    };\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n    this._spawnDelay = getRangeValue((_this$options$life$de = this.options.life.delay) !== null && _this$options$life$de !== void 0 ? _this$options$life$de : defaultLifeDelay) * millisecondsToSeconds / this.container.retina.reduceFactor;\n    this.position = (_this$_initialPositio = this._initialPosition) !== null && _this$_initialPositio !== void 0 ? _this$_initialPositio : this._calcPosition();\n    this.name = this.options.name;\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    let particlesOptions = deepExtend({}, this.options.particles);\n    (_particlesOptions = particlesOptions) !== null && _particlesOptions !== void 0 ? _particlesOptions : particlesOptions = {};\n    (_particlesOptions2$mo = (_particlesOptions2 = particlesOptions).move) !== null && _particlesOptions2$mo !== void 0 ? _particlesOptions2$mo : _particlesOptions2.move = {};\n    (_particlesOptions$mov2 = (_particlesOptions$mov = particlesOptions.move).direction) !== null && _particlesOptions$mov2 !== void 0 ? _particlesOptions$mov2 : _particlesOptions$mov.direction = this.options.direction;\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n    this._size = this._calcSize();\n    this.size = getSize(this._size, this.container.canvas.size);\n    this._lifeCount = (_this$options$life$co = this.options.life.count) !== null && _this$options$life$co !== void 0 ? _this$options$life$co : defaultLifeCount;\n    this._immortal = this._lifeCount <= minLifeCount;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        this._mutationObserver = new MutationObserver(() => {\n          this.resize();\n        });\n        this._resizeObserver = new ResizeObserver(() => {\n          this.resize();\n        });\n        this._mutationObserver.observe(element, {\n          attributes: true,\n          attributeFilter: [\"style\", \"width\", \"height\"]\n        });\n        this._resizeObserver.observe(element);\n      }\n    }\n    const shapeOptions = this.options.shape,\n      shapeGenerator = (_this$_engine$emitter = this._engine.emitterShapeManager) === null || _this$_engine$emitter === void 0 ? void 0 : _this$_engine$emitter.getShapeGenerator(shapeOptions.type);\n    if (shapeGenerator) {\n      this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n    }\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container,\n      data: {\n        emitter: this\n      }\n    });\n    this.play();\n  }\n  externalPause() {\n    this._paused = true;\n    this.pause();\n  }\n  externalPlay() {\n    this._paused = false;\n    this.play();\n  }\n  async init() {\n    var _this$_shape;\n    await ((_this$_shape = this._shape) === null || _this$_shape === void 0 ? void 0 : _this$_shape.init());\n  }\n  pause() {\n    if (this._paused) {\n      return;\n    }\n    delete this._emitDelay;\n  }\n  play() {\n    var _this$_spawnDelay;\n    if (this._paused) {\n      return;\n    }\n    if (!(this.container.retina.reduceFactor && (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= ((_this$_spawnDelay = this._spawnDelay) !== null && _this$_spawnDelay !== void 0 ? _this$_spawnDelay : defaultSpawnDelay)))) {\n      return;\n    }\n    if (this._emitDelay === undefined) {\n      const delay = getRangeValue(this.options.rate.delay);\n      this._emitDelay = delay * millisecondsToSeconds / this.container.retina.reduceFactor;\n    }\n    if (this._lifeCount > minLifeCount || this._immortal) {\n      this._prepareToDie();\n    }\n  }\n  resize() {\n    var _this$_shape2;\n    const initialPosition = this._initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n    this._size = this._calcSize();\n    this.size = getSize(this._size, this.container.canvas.size);\n    (_this$_shape2 = this._shape) === null || _this$_shape2 === void 0 || _this$_shape2.resize(this.position, this.size);\n  }\n  update(delta) {\n    if (this._paused) {\n      return;\n    }\n    if (this._firstSpawn) {\n      var _this$_spawnDelay2, _this$_emitDelay;\n      this._firstSpawn = false;\n      this._currentSpawnDelay = (_this$_spawnDelay2 = this._spawnDelay) !== null && _this$_spawnDelay2 !== void 0 ? _this$_spawnDelay2 : defaultSpawnDelay;\n      this._currentEmitDelay = (_this$_emitDelay = this._emitDelay) !== null && _this$_emitDelay !== void 0 ? _this$_emitDelay : defaultEmitDelay;\n    }\n    if (!this._startParticlesAdded) {\n      this._startParticlesAdded = true;\n      this._emitParticles(this.options.startCount);\n    }\n    if (this._duration !== undefined) {\n      this._currentDuration += delta.value;\n      if (this._currentDuration >= this._duration) {\n        this.pause();\n        if (this._spawnDelay !== undefined) {\n          delete this._spawnDelay;\n        }\n        if (!this._immortal) {\n          this._lifeCount--;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n          var _this$_shape3, _this$options$life$de2;\n          this.position = this._calcPosition();\n          (_this$_shape3 = this._shape) === null || _this$_shape3 === void 0 || _this$_shape3.resize(this.position, this.size);\n          this._spawnDelay = getRangeValue((_this$options$life$de2 = this.options.life.delay) !== null && _this$options$life$de2 !== void 0 ? _this$options$life$de2 : defaultLifeDelay) * millisecondsToSeconds / this.container.retina.reduceFactor;\n        } else {\n          this._destroy();\n        }\n        this._currentDuration -= this._duration;\n        delete this._duration;\n      }\n    }\n    if (this._spawnDelay !== undefined) {\n      this._currentSpawnDelay += delta.value;\n      if (this._currentSpawnDelay >= this._spawnDelay) {\n        this._engine.dispatchEvent(\"emitterPlay\", {\n          container: this.container\n        });\n        this.play();\n        this._currentSpawnDelay -= this._currentSpawnDelay;\n        delete this._spawnDelay;\n      }\n    }\n    if (this._emitDelay !== undefined) {\n      this._currentEmitDelay += delta.value;\n      if (this._currentEmitDelay >= this._emitDelay) {\n        this._emit();\n        this._currentEmitDelay -= this._emitDelay;\n      }\n    }\n  }\n  _calcPosition() {\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect(),\n          pxRatio = this.container.retina.pixelRatio;\n        return {\n          x: (elRect.x + elRect.width * half) * pxRatio,\n          y: (elRect.y + elRect.height * half) * pxRatio\n        };\n      }\n    }\n    return calcPositionOrRandomFromSizeRanged({\n      size: this.container.canvas.size,\n      position: this.options.position\n    });\n  }\n  _calcSize() {\n    var _this$options$size;\n    const container = this.container;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          width: elRect.width * container.retina.pixelRatio,\n          height: elRect.height * container.retina.pixelRatio,\n          mode: PixelMode.precise\n        };\n      }\n    }\n    return (_this$options$size = this.options.size) !== null && _this$options$size !== void 0 ? _this$options$size : (() => {\n      const size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: PixelMode.percent,\n        width: 0\n      });\n      return size;\n    })();\n  }\n  _emit() {\n    if (this._paused) {\n      return;\n    }\n    const quantity = getRangeValue(this.options.rate.quantity);\n    this._emitParticles(quantity);\n  }\n  _emitParticles(quantity) {\n    const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n    for (let i = 0; i < quantity; i++) {\n      const particlesOptions = deepExtend({}, singleParticlesOptions);\n      if (this.spawnColor) {\n        var _this$options$spawnCo;\n        const hslAnimation = (_this$options$spawnCo = this.options.spawnColor) === null || _this$options$spawnCo === void 0 ? void 0 : _this$options$spawnCo.animation;\n        if (hslAnimation) {\n          const maxValues = {\n              h: 360,\n              s: 100,\n              l: 100\n            },\n            colorFactor = 3.6;\n          this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n          this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n          this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n        }\n        setParticlesOptionsColor(particlesOptions, this.spawnColor);\n      }\n      const shapeOptions = this.options.shape;\n      let position = this.position;\n      if (this._shape) {\n        const shapePosData = this._shape.randomPosition();\n        if (shapePosData) {\n          position = shapePosData.position;\n          const replaceData = shapeOptions.replace;\n          if (replaceData.color && shapePosData.color) {\n            setParticlesOptionsColor(particlesOptions, shapePosData.color);\n          }\n          if (replaceData.opacity) {\n            if (particlesOptions.opacity) {\n              particlesOptions.opacity.value = shapePosData.opacity;\n            } else {\n              particlesOptions.opacity = {\n                value: shapePosData.opacity\n              };\n            }\n          }\n        } else {\n          position = null;\n        }\n      }\n      if (position) {\n        this.container.particles.addParticle(position, particlesOptions);\n      }\n    }\n  }\n}","map":{"version":3,"names":["PixelMode","Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","getSize","isPointInside","itemFromSingleOrMultiple","millisecondsToSeconds","randomInRange","rangeColorToHsl","Emitter","EmitterSize","half","defaultLifeDelay","minLifeCount","defaultSpawnDelay","defaultEmitDelay","defaultLifeCount","defaultColorAnimationFactor","setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","constructor","engine","emitters","container","options","position","_this","_this$options$life$de","_this$_initialPositio","_particlesOptions","_particlesOptions2","_particlesOptions2$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$life$co","_this$_engine$emitter","_destroy","_this$_mutationObserv","_this$_resizeObserver","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_this$options$life","_paused","duration","life","minDuration","retina","reduceFactor","_lifeCount","_immortal","_duration","_setColorAnimation","animation","initValue","maxValue","_animation$speed","factor","arguments","length","enable","colorOffset","offset","delay","rate","emitFactor","defaultColorSpeed","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","particles","move","direction","spawnColor","autoPlay","_size","_calcSize","size","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","externalPause","pause","externalPlay","init","_this$_shape","_emitDelay","_this$_spawnDelay","_this$_shape2","initialPosition","origin","update","delta","_this$_spawnDelay2","_this$_emitDelay","_emitParticles","startCount","_this$_shape3","_this$options$life$de2","_emit","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","_this$options$size","mode","precise","percent","quantity","singleParticlesOptions","i","_this$options$spawnCo","hslAnimation","maxValues","h","s","l","colorFactor","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"sources":["D:/ReactApp/node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { PixelMode, Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: PixelMode.precise,\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: PixelMode.percent,\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}