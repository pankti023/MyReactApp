{"ast":null,"code":"import { PixelMode, getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"@tsparticles/engine\";\nconst defaultOffset = 0,\n  minDestroySize = 0.5,\n  defaultSplitCount = 0,\n  increment = 1,\n  unbreakableTime = 500,\n  minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n  const destroyOptions = parent.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split,\n    options = loadParticlesOptions(engine, container, parent.options),\n    factor = getRangeValue(splitOptions.factor.value),\n    parentColor = parent.getFillColor();\n  if (splitOptions.color) {\n    options.color.load(splitOptions.color);\n  } else if (splitOptions.colorOffset && parentColor) {\n    var _splitOptions$colorOf, _splitOptions$colorOf2, _splitOptions$colorOf3;\n    options.color.load({\n      value: {\n        hsl: {\n          h: parentColor.h + getRangeValue((_splitOptions$colorOf = splitOptions.colorOffset.h) !== null && _splitOptions$colorOf !== void 0 ? _splitOptions$colorOf : defaultOffset),\n          s: parentColor.s + getRangeValue((_splitOptions$colorOf2 = splitOptions.colorOffset.s) !== null && _splitOptions$colorOf2 !== void 0 ? _splitOptions$colorOf2 : defaultOffset),\n          l: parentColor.l + getRangeValue((_splitOptions$colorOf3 = splitOptions.colorOffset.l) !== null && _splitOptions$colorOf3 !== void 0 ? _splitOptions$colorOf3 : defaultOffset)\n        }\n      }\n    });\n  } else {\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n  }\n  options.move.load({\n    center: {\n      x: parent.position.x,\n      y: parent.position.y,\n      mode: PixelMode.precise\n    }\n  });\n  if (isNumber(options.size.value)) {\n    options.size.value /= factor;\n  } else {\n    options.size.value.min /= factor;\n    options.size.value.max /= factor;\n  }\n  options.load(splitParticlesOptions);\n  const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset,\n    position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n  return container.particles.addParticle(position, options, parent.group, particle => {\n    var _parent$splitCount;\n    if (particle.size.value < minDestroySize) {\n      return false;\n    }\n    particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n    particle.splitCount = ((_parent$splitCount = parent.splitCount) !== null && _parent$splitCount !== void 0 ? _parent$splitCount : defaultSplitCount) + increment;\n    particle.unbreakable = true;\n    setTimeout(() => {\n      particle.unbreakable = false;\n    }, unbreakableTime);\n    return true;\n  });\n}\nexport function split(engine, container, particle) {\n  const destroyOptions = particle.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split;\n  if (splitOptions.count >= minSplitCount && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n    return;\n  }\n  const rate = getRangeValue(splitOptions.rate.value),\n    particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n  for (let i = 0; i < rate; i++) {\n    addSplitParticle(engine, container, particle, particlesSplitOptions);\n  }\n}","map":{"version":3,"names":["PixelMode","getRangeValue","isNumber","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","defaultOffset","minDestroySize","defaultSplitCount","increment","unbreakableTime","minSplitCount","addSplitParticle","engine","container","parent","splitParticlesOptions","destroyOptions","options","destroy","splitOptions","split","factor","value","parentColor","getFillColor","color","load","colorOffset","_splitOptions$colorOf","_splitOptions$colorOf2","_splitOptions$colorOf3","hsl","h","s","l","move","center","x","position","y","mode","precise","size","min","max","offset","sizeOffset","particles","addParticle","group","particle","_parent$splitCount","velocity","length","splitCount","unbreakable","setTimeout","count","undefined","rate","particlesSplitOptions","i"],"sources":["D:/ReactApp/node_modules/@tsparticles/updater-destroy/browser/Utils.js"],"sourcesContent":["import { PixelMode, getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: PixelMode.precise,\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,wBAAwB,EAAEC,oBAAoB,EAAEC,aAAa,EAAEC,aAAa,QAAS,qBAAqB;AACvJ,MAAMC,aAAa,GAAG,CAAC;EAAEC,cAAc,GAAG,GAAG;EAAEC,iBAAiB,GAAG,CAAC;EAAEC,SAAS,GAAG,CAAC;EAAEC,eAAe,GAAG,GAAG;EAAEC,aAAa,GAAG,CAAC;AAC7H,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAEC,qBAAqB,EAAE;EACxE,MAAMC,cAAc,GAAGF,MAAM,CAACG,OAAO,CAACC,OAAO;EAC7C,IAAI,CAACF,cAAc,EAAE;IACjB;EACJ;EACA,MAAMG,YAAY,GAAGH,cAAc,CAACI,KAAK;IAAEH,OAAO,GAAGf,oBAAoB,CAACU,MAAM,EAAEC,SAAS,EAAEC,MAAM,CAACG,OAAO,CAAC;IAAEI,MAAM,GAAGtB,aAAa,CAACoB,YAAY,CAACE,MAAM,CAACC,KAAK,CAAC;IAAEC,WAAW,GAAGT,MAAM,CAACU,YAAY,CAAC,CAAC;EACpM,IAAIL,YAAY,CAACM,KAAK,EAAE;IACpBR,OAAO,CAACQ,KAAK,CAACC,IAAI,CAACP,YAAY,CAACM,KAAK,CAAC;EAC1C,CAAC,MACI,IAAIN,YAAY,CAACQ,WAAW,IAAIJ,WAAW,EAAE;IAAA,IAAAK,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAC9Cb,OAAO,CAACQ,KAAK,CAACC,IAAI,CAAC;MACfJ,KAAK,EAAE;QACHS,GAAG,EAAE;UACDC,CAAC,EAAET,WAAW,CAACS,CAAC,GAAGjC,aAAa,EAAA6B,qBAAA,GAACT,YAAY,CAACQ,WAAW,CAACK,CAAC,cAAAJ,qBAAA,cAAAA,qBAAA,GAAIvB,aAAa,CAAC;UAC7E4B,CAAC,EAAEV,WAAW,CAACU,CAAC,GAAGlC,aAAa,EAAA8B,sBAAA,GAACV,YAAY,CAACQ,WAAW,CAACM,CAAC,cAAAJ,sBAAA,cAAAA,sBAAA,GAAIxB,aAAa,CAAC;UAC7E6B,CAAC,EAAEX,WAAW,CAACW,CAAC,GAAGnC,aAAa,EAAA+B,sBAAA,GAACX,YAAY,CAACQ,WAAW,CAACO,CAAC,cAAAJ,sBAAA,cAAAA,sBAAA,GAAIzB,aAAa;QAChF;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,MACI;IACDY,OAAO,CAACQ,KAAK,CAACC,IAAI,CAAC;MACfJ,KAAK,EAAE;QACHS,GAAG,EAAEjB,MAAM,CAACU,YAAY,CAAC;MAC7B;IACJ,CAAC,CAAC;EACN;EACAP,OAAO,CAACkB,IAAI,CAACT,IAAI,CAAC;IACdU,MAAM,EAAE;MACJC,CAAC,EAAEvB,MAAM,CAACwB,QAAQ,CAACD,CAAC;MACpBE,CAAC,EAAEzB,MAAM,CAACwB,QAAQ,CAACC,CAAC;MACpBC,IAAI,EAAE1C,SAAS,CAAC2C;IACpB;EACJ,CAAC,CAAC;EACF,IAAIzC,QAAQ,CAACiB,OAAO,CAACyB,IAAI,CAACpB,KAAK,CAAC,EAAE;IAC9BL,OAAO,CAACyB,IAAI,CAACpB,KAAK,IAAID,MAAM;EAChC,CAAC,MACI;IACDJ,OAAO,CAACyB,IAAI,CAACpB,KAAK,CAACqB,GAAG,IAAItB,MAAM;IAChCJ,OAAO,CAACyB,IAAI,CAACpB,KAAK,CAACsB,GAAG,IAAIvB,MAAM;EACpC;EACAJ,OAAO,CAACS,IAAI,CAACX,qBAAqB,CAAC;EACnC,MAAM8B,MAAM,GAAG1B,YAAY,CAAC2B,UAAU,GAAG1C,aAAa,CAAC,CAACU,MAAM,CAAC4B,IAAI,CAACpB,KAAK,EAAER,MAAM,CAAC4B,IAAI,CAACpB,KAAK,CAAC,GAAGjB,aAAa;IAAEiC,QAAQ,GAAG;MACtHD,CAAC,EAAEvB,MAAM,CAACwB,QAAQ,CAACD,CAAC,GAAGlC,aAAa,CAAC0C,MAAM,CAAC;MAC5CN,CAAC,EAAEzB,MAAM,CAACwB,QAAQ,CAACC,CAAC,GAAGpC,aAAa,CAAC0C,MAAM;IAC/C,CAAC;EACD,OAAOhC,SAAS,CAACkC,SAAS,CAACC,WAAW,CAACV,QAAQ,EAAErB,OAAO,EAAEH,MAAM,CAACmC,KAAK,EAAGC,QAAQ,IAAK;IAAA,IAAAC,kBAAA;IAClF,IAAID,QAAQ,CAACR,IAAI,CAACpB,KAAK,GAAGhB,cAAc,EAAE;MACtC,OAAO,KAAK;IAChB;IACA4C,QAAQ,CAACE,QAAQ,CAACC,MAAM,GAAGlD,aAAa,CAACC,aAAa,CAACU,MAAM,CAACsC,QAAQ,CAACC,MAAM,EAAEH,QAAQ,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC;IACzGH,QAAQ,CAACI,UAAU,GAAG,EAAAH,kBAAA,GAACrC,MAAM,CAACwC,UAAU,cAAAH,kBAAA,cAAAA,kBAAA,GAAI5C,iBAAiB,IAAIC,SAAS;IAC1E0C,QAAQ,CAACK,WAAW,GAAG,IAAI;IAC3BC,UAAU,CAAC,MAAM;MACbN,QAAQ,CAACK,WAAW,GAAG,KAAK;IAChC,CAAC,EAAE9C,eAAe,CAAC;IACnB,OAAO,IAAI;EACf,CAAC,CAAC;AACN;AACA,OAAO,SAASW,KAAKA,CAACR,MAAM,EAAEC,SAAS,EAAEqC,QAAQ,EAAE;EAC/C,MAAMlC,cAAc,GAAGkC,QAAQ,CAACjC,OAAO,CAACC,OAAO;EAC/C,IAAI,CAACF,cAAc,EAAE;IACjB;EACJ;EACA,MAAMG,YAAY,GAAGH,cAAc,CAACI,KAAK;EACzC,IAAID,YAAY,CAACsC,KAAK,IAAI/C,aAAa,KAClCwC,QAAQ,CAACI,UAAU,KAAKI,SAAS,IAAIR,QAAQ,CAACI,UAAU,EAAE,GAAGnC,YAAY,CAACsC,KAAK,CAAC,EAAE;IACnF;EACJ;EACA,MAAME,IAAI,GAAG5D,aAAa,CAACoB,YAAY,CAACwC,IAAI,CAACrC,KAAK,CAAC;IAAEsC,qBAAqB,GAAG3D,wBAAwB,CAACkB,YAAY,CAAC4B,SAAS,CAAC;EAC7H,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC3BlD,gBAAgB,CAACC,MAAM,EAAEC,SAAS,EAAEqC,QAAQ,EAAEU,qBAAqB,CAAC;EACxE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}