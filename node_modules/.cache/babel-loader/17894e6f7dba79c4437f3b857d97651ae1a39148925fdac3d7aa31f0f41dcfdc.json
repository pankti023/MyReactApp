{"ast":null,"code":"import { executeOnSingleOrMultiple, isArray, isInArray } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { Absorbers } from \"./Absorbers.js\";\nexport class AbsorbersPlugin {\n  constructor() {\n    this.id = \"absorbers\";\n  }\n  async getPlugin(container) {\n    return Promise.resolve(new Absorbers(container));\n  }\n  loadOptions(options, source) {\n    var _source$interactivity;\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n    if (source !== null && source !== void 0 && source.absorbers) {\n      options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n        const tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n    }\n    options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source === null || source === void 0 || (_source$interactivity = source.interactivity) === null || _source$interactivity === void 0 || (_source$interactivity = _source$interactivity.modes) === null || _source$interactivity === void 0 ? void 0 : _source$interactivity.absorbers, absorber => {\n      const tmp = new Absorber();\n      tmp.load(absorber);\n      return tmp;\n    });\n  }\n  needsPlugin(options) {\n    var _options$interactivit;\n    if (!options) {\n      return false;\n    }\n    const absorbers = options.absorbers;\n    if (isArray(absorbers)) {\n      return !!absorbers.length;\n    } else if (absorbers) {\n      return true;\n    } else if ((_options$interactivit = options.interactivity) !== null && _options$interactivit !== void 0 && (_options$interactivit = _options$interactivit.events) !== null && _options$interactivit !== void 0 && (_options$interactivit = _options$interactivit.onClick) !== null && _options$interactivit !== void 0 && _options$interactivit.mode && isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","isArray","isInArray","Absorber","AbsorberClickMode","Absorbers","AbsorbersPlugin","constructor","id","getPlugin","container","Promise","resolve","loadOptions","options","source","_source$interactivity","needsPlugin","absorbers","absorber","tmp","load","interactivity","modes","_options$interactivit","length","events","onClick","mode"],"sources":["D:/ReactApp/node_modules/@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { Absorbers } from \"./Absorbers.js\";\nexport class AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    async getPlugin(container) {\n        return Promise.resolve(new Absorbers(container));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,EAAEC,OAAO,EAAEC,SAAS,QAAS,qBAAqB;AACpF,SAASC,QAAQ,QAAQ,+BAA+B;AACxD,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,OAAO,MAAMC,eAAe,CAAC;EACzBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,EAAE,GAAG,WAAW;EACzB;EACA,MAAMC,SAASA,CAACC,SAAS,EAAE;IACvB,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAIP,SAAS,CAACK,SAAS,CAAC,CAAC;EACpD;EACAG,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAAA,IAAAC,qBAAA;IACzB,IAAI,CAAC,IAAI,CAACC,WAAW,CAACH,OAAO,CAAC,IAAI,CAAC,IAAI,CAACG,WAAW,CAACF,MAAM,CAAC,EAAE;MACzD;IACJ;IACA,IAAIA,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEG,SAAS,EAAE;MACnBJ,OAAO,CAACI,SAAS,GAAGlB,yBAAyB,CAACe,MAAM,CAACG,SAAS,EAAEC,QAAQ,IAAI;QACxE,MAAMC,GAAG,GAAG,IAAIjB,QAAQ,CAAC,CAAC;QAC1BiB,GAAG,CAACC,IAAI,CAACF,QAAQ,CAAC;QAClB,OAAOC,GAAG;MACd,CAAC,CAAC;IACN;IACAN,OAAO,CAACQ,aAAa,CAACC,KAAK,CAACL,SAAS,GAAGlB,yBAAyB,CAACe,MAAM,aAANA,MAAM,gBAAAC,qBAAA,GAAND,MAAM,CAAEO,aAAa,cAAAN,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBO,KAAK,cAAAP,qBAAA,uBAA5BA,qBAAA,CAA8BE,SAAS,EAAEC,QAAQ,IAAI;MACnH,MAAMC,GAAG,GAAG,IAAIjB,QAAQ,CAAC,CAAC;MAC1BiB,GAAG,CAACC,IAAI,CAACF,QAAQ,CAAC;MAClB,OAAOC,GAAG;IACd,CAAC,CAAC;EACN;EACAH,WAAWA,CAACH,OAAO,EAAE;IAAA,IAAAU,qBAAA;IACjB,IAAI,CAACV,OAAO,EAAE;MACV,OAAO,KAAK;IAChB;IACA,MAAMI,SAAS,GAAGJ,OAAO,CAACI,SAAS;IACnC,IAAIjB,OAAO,CAACiB,SAAS,CAAC,EAAE;MACpB,OAAO,CAAC,CAACA,SAAS,CAACO,MAAM;IAC7B,CAAC,MACI,IAAIP,SAAS,EAAE;MAChB,OAAO,IAAI;IACf,CAAC,MACI,IAAI,CAAAM,qBAAA,GAAAV,OAAO,CAACQ,aAAa,cAAAE,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBE,MAAM,cAAAF,qBAAA,gBAAAA,qBAAA,GAA7BA,qBAAA,CAA+BG,OAAO,cAAAH,qBAAA,eAAtCA,qBAAA,CAAwCI,IAAI,IACjD1B,SAAS,CAACE,iBAAiB,CAACe,QAAQ,EAAEL,OAAO,CAACQ,aAAa,CAACI,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC,EAAE;MAClF,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}