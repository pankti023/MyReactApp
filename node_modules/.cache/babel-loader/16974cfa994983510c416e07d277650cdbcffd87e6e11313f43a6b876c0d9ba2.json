{"ast":null,"code":"export function observeSections(){const sections=document.querySelectorAll('.section');const observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add('active');}else{entry.target.classList.remove('active');}});},{threshold:0.1});sections.forEach(section=>{observer.observe(section);});}","map":{"version":3,"names":["observeSections","sections","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","threshold","section","observe"],"sources":["D:/ReactApp/src/utils/sectionObserver.js"],"sourcesContent":["export function observeSections() {\r\n  const sections = document.querySelectorAll('.section');\r\n  \r\n  const observer = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        entry.target.classList.add('active');\r\n      } else {\r\n        entry.target.classList.remove('active');\r\n      }\r\n    });\r\n  }, { threshold: 0.1 });\r\n\r\n  sections.forEach(section => {\r\n    observer.observe(section);\r\n  });\r\n}\r\n"],"mappings":"AAAA,MAAO,SAAS,CAAAA,eAAeA,CAAA,CAAG,CAChC,KAAM,CAAAC,QAAQ,CAAGC,QAAQ,CAACC,gBAAgB,CAAC,UAAU,CAAC,CAEtD,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CAAEC,OAAO,EAAK,CACrDA,OAAO,CAACC,OAAO,CAACC,KAAK,EAAI,CACvB,GAAIA,KAAK,CAACC,cAAc,CAAE,CACxBD,KAAK,CAACE,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC,CACtC,CAAC,IAAM,CACLJ,KAAK,CAACE,MAAM,CAACC,SAAS,CAACE,MAAM,CAAC,QAAQ,CAAC,CACzC,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAAEC,SAAS,CAAE,GAAI,CAAC,CAAC,CAEtBb,QAAQ,CAACM,OAAO,CAACQ,OAAO,EAAI,CAC1BX,QAAQ,CAACY,OAAO,CAACD,OAAO,CAAC,CAC3B,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}