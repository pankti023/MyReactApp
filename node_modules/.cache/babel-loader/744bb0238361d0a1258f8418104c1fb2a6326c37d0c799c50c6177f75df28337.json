{"ast":null,"code":"import { RotateDirection, Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2,\n  absorbFactor = 0.033,\n  minOrbitLength = 0,\n  minRadius = 0,\n  minMass = 0,\n  origin = {\n    x: 0,\n    y: 0\n  },\n  minAngle = 0,\n  double = 2,\n  maxAngle = Math.PI * double,\n  minVelocity = 0;\nexport class AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _rangeColorToRgb, _this$initialPosition, _this$initialPosition2;\n    this.absorbers = absorbers;\n    this.container = container;\n    this._calcPosition = () => {\n      const exactPosition = calcPositionOrRandomFromSizeRanged({\n        size: this.container.canvas.size,\n        position: this.options.position\n      });\n      return Vector.create(exactPosition.x, exactPosition.y);\n    };\n    this._updateParticlePosition = (particle, v) => {\n      if (particle.destroyed) {\n        return;\n      }\n      const container = this.container,\n        canvasSize = container.canvas.size;\n      if (particle.needsNewPosition) {\n        const newPosition = calcPositionOrRandomFromSize({\n          size: canvasSize\n        });\n        particle.position.setTo(newPosition);\n        particle.velocity.setTo(particle.initialVelocity);\n        particle.absorberOrbit = undefined;\n        particle.needsNewPosition = false;\n      }\n      if (this.options.orbits) {\n        var _particle$retina$move;\n        if (particle.absorberOrbit === undefined) {\n          particle.absorberOrbit = Vector.origin;\n          particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n          particle.absorberOrbit.angle = getRandom() * maxAngle;\n        }\n        if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n          const minSize = Math.min(canvasSize.width, canvasSize.height),\n            offset = 1,\n            randomOffset = 0.1,\n            randomFactor = 0.2;\n          particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n        }\n        if (particle.absorberOrbitDirection === undefined) {\n          particle.absorberOrbitDirection = particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;\n        }\n        const orbitRadius = particle.absorberOrbit.length,\n          orbitAngle = particle.absorberOrbit.angle,\n          orbitDirection = particle.absorberOrbitDirection;\n        particle.velocity.setTo(Vector.origin);\n        const updateFunc = {\n          x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,\n          y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos\n        };\n        particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n        particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n        particle.absorberOrbit.length -= v.length;\n        particle.absorberOrbit.angle += ((_particle$retina$move = particle.retina.moveSpeed) !== null && _particle$retina$move !== void 0 ? _particle$retina$move : minVelocity) * container.retina.pixelRatio / percentDenominator * container.retina.reduceFactor;\n      } else {\n        const addV = Vector.origin;\n        addV.length = v.length;\n        addV.angle = v.angle;\n        particle.velocity.addTo(addV);\n      }\n    };\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    const limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = (_rangeColorToRgb = rangeColorToRgb(this.options.color)) !== null && _rangeColorToRgb !== void 0 ? _rangeColorToRgb : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_this$initialPosition = (_this$initialPosition2 = this.initialPosition) === null || _this$initialPosition2 === void 0 ? void 0 : _this$initialPosition2.copy()) !== null && _this$initialPosition !== void 0 ? _this$initialPosition : this._calcPosition();\n  }\n  attract(particle) {\n    const container = this.container,\n      options = this.options;\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = getDistance(this.position, mouse.downPosition);\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n    const pos = particle.getPosition(),\n      {\n        dx,\n        dy,\n        distance\n      } = getDistances(this.position, pos),\n      v = Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, squareExp) * container.retina.reduceFactor;\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this._updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n        this._updateParticlePosition(particle, v);\n      }\n      if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n        this.size += sizeFactor;\n      }\n      if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n      }\n    } else {\n      this._updateParticlePosition(particle, v);\n    }\n  }\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n    context.closePath();\n    context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n  }\n}","map":{"version":3,"names":["RotateDirection","Vector","calcPositionOrRandomFromSize","calcPositionOrRandomFromSizeRanged","getDistance","getDistances","getRandom","getRangeValue","getStyleFromRgb","isPointInside","percentDenominator","rangeColorToRgb","Absorber","squareExp","absorbFactor","minOrbitLength","minRadius","minMass","origin","x","y","minAngle","double","maxAngle","Math","PI","minVelocity","AbsorberInstance","constructor","absorbers","container","options","position","_rangeColorToRgb","_this$initialPosition","_this$initialPosition2","_calcPosition","exactPosition","size","canvas","create","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","_particle$retina$move","length","getPosition","angle","destroy","minSize","min","width","height","offset","randomOffset","randomFactor","absorberOrbitDirection","clockwise","counterClockwise","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","reduceFactor","addV","addTo","initialPosition","load","dragging","name","opacity","value","mass","density","limit","radius","color","b","g","r","copy","attract","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","dx","dy","distance","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","fill","resize"],"sources":["D:/ReactApp/node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { RotateDirection, Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,\n                    y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}